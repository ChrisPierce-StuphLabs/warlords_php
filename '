<?php

//TODO: fix logic of the submit button so it displays its' echo when satisfied.
//TODO: fix the large empty space between the submit button and the table drawn from the database.
//TODO: validate data coming into the database
//TODO: validate data coming from the database
//TODO: make array of chosen warlords
//TODO: make array of randomly chosen warlords for the ai player





class warlord{
    public $name;
    public $totalHp;
    public $currentHp;
    public $attack;
    public $defence;
    public $type;
    public $isTurn;  

    public function __construct($name, $totalHp, $currentHp, $attack, $defence, $type, $isTurn) {
        $this->name = $name;
        $this->totalHp = $totalHp;
        $this->currentHp = $currentHp;
        $this->attack = $attack;
        $this->defence = $defence;
        $this->type = $type;
        $this->isTurn = $isTurn;
    }// end __construct()

  //1 = Zeus, 2 = Hades, 3 = Athena , 4 = Hermes ,5 = Aphrodite ,6 = Posiedon
  public static function ask() {
      echo '<div align="center" id="greeting"> <h3> Welcome to Warlords! Please choose your 3 Warlords: </h3></div>';
  }


  /*
  public static function choose() {
    $warlord_1; 
    $warlord_2;
    $warlord_3;

  } //end of choose()
  */

  //array of warlords chosen does here
  //$chosen = array();

  //end array



  public static function attack() {

  }//end of attack()

  public static function defend() {

  }//end of defend()

  public static function who() {
    echo "Your selected warlords are: "; 

  }//end of who()  

}//end of warlord

class zeus extends warlord{
    function __construct() {
        parent:: __construct(name, totalHp, currentHp, attack, defence, type, isTurn);
        $this->name = "zeus";
        $this->totalHp = 500;
        $this->currentHp = 500;
        $this->attack = 25;
        $this->defence = 4;
        $this->type = "electric";
        $this->isTurn = false;
    }
    
}
class hades extends warlord{
      function __construct() {
        parent:: __construct(name, totalHp, currentHp, attack, defence, type, isTurn);
        $this->name = "hades";
        $this->totalHp = 500;
        $this->currentHp = 500;
        $this->attack = 25;
        $this->defence = 4;
        $this->type = "fire";
        $this->isTurn = false;  
}

}
class athena extends warlord{
      function __construct() {
        parent:: __construct(name, totalHp, currentHp, attack, defence, type, isTurn);
        $this->name = "athena";
        $this->totalHp = 500;
        $this->currentHp = 500;
        $this->attack = 25;
        $this->defence = 4;
        $this->type = "wisdom";
        $this->isTurn = false;
    }

}
class hermes extends warlord{
      function __construct() {
        parent:: __construct(name, totalHp, currentHp, attack, defence, type, isTurn);
        $this->name = "hermes";
        $this->totalHp = 500;
        $this->currentHp = 500;
        $this->attack = 25;
        $this->defence = 4;
        $this->type = "warrior";
        $this->isTurn = false;
    }

}
class aphrodite extends warlord{
      function __construct() {
        parent:: __construct(name, totalHp, currentHp, attack, defence, type, isTurn);
        $this->name = "aphrodite";
        $this->totalHp = 500;
        $this->currentHp = 500;
        $this->attack = 25;
        $this->defence = 4;
        $this->type = "love";
        $this->isTurn = false;
    }

}
class poseidon extends warlord{
      function __construct() {
        parent:: __construct(name, totalHp, currentHp, attack, defence, type, isTurn);
        $this->name = "poseidon";
        $this->totalHp = 500;
        $this->currentHp = 500;
        $this->attack = 25;
        $this->defence = 4;
        $this->type = "water";
        $this->isTurn = false;
    }

}


//here are the objects created of the warlords.
//format goes name totalHp currentHp attack defence type isTurn 
$zeus = new zeus("zeus", 500, 500, 25, 4, "electric", false);
$hades = new hades("hades", 500, 500, 25, 4, "fire", false);
$athena = new athena("athena", 500, 500, 25, 4, "wisdom", false);
$hermes = new hermes("hermes", 500, 500, 25, 4, "warrior", false);
$aphrodite = new aphrodite("aphrodite", 500, 500, 25, 4, "love", false);
$poseidon = new poseidon("poseidon", 500, 500, 25, 4, "water", false);




/* Use the single quotes when echoing html, so that the double quotes in the tags don't interfere. */

  function makeSkeleton() {
    echo '<!DOCTYPE html>
            <html>  
                <head>
                    <link type="text/css" rel="stylesheet" href="stylesheet.css">
                </head>
                <body> 
                    <!--This text should never be seen by anyone but the developer. -->
                <p> </p>';
 
        
} // end makeSkeleton()

//draw skeleton of the html
makeSkeleton();		

warlord::ask();

//warlord::choose();

    echo' <div align="center">
    <img src="zeus.jpg" height="100" width="100" hspace="3"> </img>
    <img src="hades.jpg" height="100" width="100" hspace="3"> </img>
    <img src="athena.jpg" height="100" width="100" hspace="3"> </img>
    <img src="hermes.jpg" height="100" width="100" hspace="3"> </img>
    <img src="aphrodite.jpg" height="100" width="100" hspace="3"> </img>
    <img src="poseidon.jpg" height="100" width="100" hspace="3"> </img>
    </div>

    <div align="center" class="buttons"> <p> </p> 
    <button type="button">____Zeus___</button>
    <button type="button">__Hades____</button> 
    <button type="button">__Athena___</button> 
    <button type="button">__Hermes___</button> 
    <button type="button">_Aphrodite_</button> 
    <button type="button">_Poseidon__</button>  
    </div>'; 
    

    //new
    //format of host/ip, username, password, nameOfDatabase
    $connect=mysqli_connect("localhost", "webdbuser", "sillypassword", "warlords");

    //check connection
    if (mysqli_connect_errno()) {
        echo "Failed to connect to MySQL: " . mysqli_connect_error();
    } else {
       echo ' <div align="center">connection succeeded. </div>';
    }



    echo '<div align="center">'; 
 
    /*<!--action="insert_warlords.php" 
    action="warlords.php"  Dont forget to refresh the page.-->*/

    echo '<form action="insert_warlords.php" method="post"><br /><br /> 
    Name of first warlord:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type="text" name="wname"><br />
    Name of the Second Warlord: <input type="text" name="xname"><br />
    Name of the Second Warlord: <input type="text" name="yname"><br />

    <br />
    <input type="submit">
    </form>';



    //order goes zeus hades athena hermes aphrodite poseidon
    echo '<div align="center">' .  "$zeus->name" .  " " . "$zeus->currentHp" . "<p> </p>";
    echo "$hades->name" . "$hades->currentHp" . "<p></p>";
    echo "$hades->name" . "$hades->currentHp" . "<p></p>";
    echo "$hades->name" . "$hades->currentHp" . "<p></p>";
    echo "$hades->name" . "$hades->currentHp" . "<p></p>";
    echo "$hades->name" . "$hades->currentHp" . "<p></p>";
    echo "$hades->name" . "$hades->currentHp" . "<p></p>";

    //why on earth is there such a large empty space between submit and the table....?
    $result = mysqli_query($connect,"SELECT * FROM warlord_chosen");

    

    //set history to true to show the contents of the mysql warlordchosen table.
    $history = false;
    if ($history == true) {
        echo '<table border="1">
        <tr>
        <th>name</th>
        </tr>';

        while($row = mysqli_fetch_array($result)) {
          echo "<tr> " . "<td>" . $row['name'] . "</td>";
          echo "</tr> <br>";
        }
    
    }


    //new


    echo '
    </body> 
    </html> ';   


     mysqli_close($connect);
    //end new
?>
